{
  "functions": [
    {
      "proto": "bool           action::is_invalid            (Action a);                             ",
      "name": "action::is_invalid",
      "type": "F",
      "args": 1
    },
    {
      "proto": "Action         action::mk                    (int reflen, int totallen, int startptr); ",
      "name": "action::mk",
      "type": "F",
      "args": 3,
      "full": "bitvm::action::mk"
    },
    {
      "proto": "void           action::run                   (Action a);                             ",
      "name": "action::run",
      "type": "P",
      "args": 1,
      "full": "bitvm::action::run"
    },
    {
      "proto": "void           action::run1                  (Action a, int arg);                    ",
      "name": "action::run1",
      "type": "P",
      "args": 2,
      "full": "bitvm::action::run1"
    },
    {
      "proto": "int            bits::and_uint32              (int x, int y);                         ",
      "name": "bits::and_uint32",
      "type": "F",
      "args": 2
    },
    {
      "proto": "RefBuffer*     bits::create_buffer           (int size);                             ",
      "name": "bits::create_buffer",
      "type": "F",
      "args": 1,
      "full": "bitvm::bitvm_bits::create_buffer"
    },
    {
      "proto": "int            bits::or_uint32               (int x, int y);                         ",
      "name": "bits::or_uint32",
      "type": "F",
      "args": 2
    },
    {
      "proto": "int            bits::rotate_left_uint32      (int x, int y);                         ",
      "name": "bits::rotate_left_uint32",
      "type": "F",
      "args": 2
    },
    {
      "proto": "int            bits::rotate_right_uint32     (int x, int y);                         ",
      "name": "bits::rotate_right_uint32",
      "type": "F",
      "args": 2
    },
    {
      "proto": "int            bits::shift_left_uint32       (int x, int y);                         ",
      "name": "bits::shift_left_uint32",
      "type": "F",
      "args": 2
    },
    {
      "proto": "int            bits::shift_right_uint32      (int x, int y);                         ",
      "name": "bits::shift_right_uint32",
      "type": "F",
      "args": 2
    },
    {
      "proto": "int            bits::xor_uint32              (int x, int y);                         ",
      "name": "bits::xor_uint32",
      "type": "F",
      "args": 2
    },
    {
      "proto": "uint32_t*      bitvm::allocate               (uint16_t sz);                          ",
      "name": "bitvm::allocate",
      "type": "F",
      "args": 1,
      "full": "bitvm::allocate"
    },
    {
      "proto": "void           bitvm::checkStr               (bool cond, const char *msg);           ",
      "name": "bitvm::checkStr",
      "type": "P",
      "args": 2,
      "full": "bitvm::checkStr"
    },
    {
      "proto": "uint32_t       bitvm::const3                 ();                                     ",
      "name": "bitvm::const3",
      "type": "F",
      "args": 0,
      "full": "bitvm::const3"
    },
    {
      "proto": "void           bitvm::debugMemLeaks          ();                                     ",
      "name": "bitvm::debugMemLeaks",
      "type": "P",
      "args": 0,
      "full": "bitvm::debugMemLeaks"
    },
    {
      "proto": "void           bitvm::decr                   (uint32_t e);                           ",
      "name": "bitvm::decr",
      "type": "P",
      "args": 1,
      "full": "bitvm::decr"
    },
    {
      "proto": "void           bitvm::error                  (ERROR code, int subcode = 0);          ",
      "name": "bitvm::error",
      "type": "P",
      "args": 2,
      "full": "bitvm::error"
    },
    {
      "proto": "void           bitvm::exec_binary            (uint16_t *pc);                         ",
      "name": "bitvm::exec_binary",
      "type": "P",
      "args": 1,
      "full": "bitvm::exec_binary"
    },
    {
      "proto": "bool           bitvm::hasVTable              (uint32_t e);                           ",
      "name": "bitvm::hasVTable",
      "type": "F",
      "args": 1,
      "full": "bitvm::hasVTable"
    },
    {
      "proto": "void           bitvm::incr                   (uint32_t e);                           ",
      "name": "bitvm::incr",
      "type": "P",
      "args": 1,
      "full": "bitvm::incr"
    },
    {
      "proto": "uint32_t       bitvm::is_invalid             (uint32_t v);                           ",
      "name": "bitvm::is_invalid",
      "type": "F",
      "args": 1,
      "full": "bitvm::is_invalid"
    },
    {
      "proto": "uint32_t       bitvm::ldfld                  (RefRecord *r, int idx);                ",
      "name": "bitvm::ldfld",
      "type": "F",
      "args": 2,
      "full": "bitvm::ldfld"
    },
    {
      "proto": "uint32_t       bitvm::ldfldRef               (RefRecord *r, int idx);                ",
      "name": "bitvm::ldfldRef",
      "type": "F",
      "args": 2,
      "full": "bitvm::ldfldRef"
    },
    {
      "proto": "uint32_t       bitvm::ldglb                  (int idx);                              ",
      "name": "bitvm::ldglb",
      "type": "F",
      "args": 1,
      "full": "bitvm::ldglb"
    },
    {
      "proto": "uint32_t       bitvm::ldglbRef               (int idx);                              ",
      "name": "bitvm::ldglbRef",
      "type": "F",
      "args": 1,
      "full": "bitvm::ldglbRef"
    },
    {
      "proto": "uint32_t       bitvm::ldloc                  (RefLocal *r);                          ",
      "name": "bitvm::ldloc",
      "type": "F",
      "args": 1,
      "full": "bitvm::ldloc"
    },
    {
      "proto": "uint32_t       bitvm::ldlocRef               (RefRefLocal *r);                       ",
      "name": "bitvm::ldlocRef",
      "type": "F",
      "args": 1,
      "full": "bitvm::ldlocRef"
    },
    {
      "proto": "StringData*    bitvm::mkStringData           (uint32_t len);                         ",
      "name": "bitvm::mkStringData",
      "type": "F",
      "args": 1,
      "full": "bitvm::mkStringData"
    },
    {
      "proto": "RefLocal*      bitvm::mkloc                  ();                                     ",
      "name": "bitvm::mkloc",
      "type": "F",
      "args": 0,
      "full": "bitvm::mkloc"
    },
    {
      "proto": "RefRefLocal*   bitvm::mklocRef               ();                                     ",
      "name": "bitvm::mklocRef",
      "type": "F",
      "args": 0,
      "full": "bitvm::mklocRef"
    },
    {
      "proto": "int            bitvm::programHash            ();                                     ",
      "name": "bitvm::programHash",
      "type": "F",
      "args": 0,
      "full": "bitvm::programHash"
    },
    {
      "proto": "RefAction*     bitvm::stclo                  (RefAction *a, int idx, uint32_t v);    ",
      "name": "bitvm::stclo",
      "type": "F",
      "args": 3,
      "full": "bitvm::stclo"
    },
    {
      "proto": "void           bitvm::stfld                  (RefRecord *r, int idx, uint32_t val);  ",
      "name": "bitvm::stfld",
      "type": "P",
      "args": 3,
      "full": "bitvm::stfld"
    },
    {
      "proto": "void           bitvm::stfldRef               (RefRecord *r, int idx, uint32_t val);  ",
      "name": "bitvm::stfldRef",
      "type": "P",
      "args": 3,
      "full": "bitvm::stfldRef"
    },
    {
      "proto": "void           bitvm::stglb                  (uint32_t v, int idx);                  ",
      "name": "bitvm::stglb",
      "type": "P",
      "args": 2,
      "full": "bitvm::stglb"
    },
    {
      "proto": "void           bitvm::stglbRef               (uint32_t v, int idx);                  ",
      "name": "bitvm::stglbRef",
      "type": "P",
      "args": 2,
      "full": "bitvm::stglbRef"
    },
    {
      "proto": "void           bitvm::stloc                  (RefLocal *r, uint32_t v);              ",
      "name": "bitvm::stloc",
      "type": "P",
      "args": 2,
      "full": "bitvm::stloc"
    },
    {
      "proto": "void           bitvm::stlocRef               (RefRefLocal *r, uint32_t v);           ",
      "name": "bitvm::stlocRef",
      "type": "P",
      "args": 2,
      "full": "bitvm::stlocRef"
    },
    {
      "proto": "uint32_t       bitvm::stringData             (uint32_t lit);                         ",
      "name": "bitvm::stringData",
      "type": "F",
      "args": 1,
      "full": "bitvm::stringData"
    },
    {
      "proto": "int            bitvm::templateHash           ();                                     ",
      "name": "bitvm::templateHash",
      "type": "F",
      "args": 0,
      "full": "bitvm::templateHash"
    },
    {
      "proto": "bool           boolean::and_                 (bool x, bool y);                       ",
      "name": "boolean::and_",
      "type": "F",
      "args": 2
    },
    {
      "proto": "bool           boolean::equals               (bool x, bool y);                       ",
      "name": "boolean::equals",
      "type": "F",
      "args": 2
    },
    {
      "proto": "bool           boolean::not_                 (bool x);                               ",
      "name": "boolean::not_",
      "type": "F",
      "args": 1
    },
    {
      "proto": "bool           boolean::or_                  (bool x, bool y);                       ",
      "name": "boolean::or_",
      "type": "F",
      "args": 2
    },
    {
      "proto": "StringData*    boolean::to_string            (int v);                                ",
      "name": "boolean::to_string",
      "type": "F",
      "args": 1,
      "full": "bitvm::bitvm_boolean::to_string"
    },
    {
      "proto": "void           buffer::add                   (RefBuffer *c, uint32_t x);             ",
      "name": "buffer::add",
      "type": "P",
      "args": 2,
      "full": "bitvm::buffer::add"
    },
    {
      "proto": "uint32_t       buffer::at                    (RefBuffer *c, int x);                  ",
      "name": "buffer::at",
      "type": "F",
      "args": 2,
      "full": "bitvm::buffer::at"
    },
    {
      "proto": "int            buffer::count                 (RefBuffer *c);                         ",
      "name": "buffer::count",
      "type": "F",
      "args": 1,
      "full": "bitvm::buffer::count"
    },
    {
      "proto": "char*          buffer::cptr                  (RefBuffer *c);                         ",
      "name": "buffer::cptr",
      "type": "F",
      "args": 1,
      "full": "bitvm::buffer::cptr"
    },
    {
      "proto": "void           buffer::fill                  (RefBuffer *c, int v);                  ",
      "name": "buffer::fill",
      "type": "P",
      "args": 2,
      "full": "bitvm::buffer::fill"
    },
    {
      "proto": "void           buffer::fill_random           (RefBuffer *c);                         ",
      "name": "buffer::fill_random",
      "type": "P",
      "args": 1,
      "full": "bitvm::buffer::fill_random"
    },
    {
      "proto": "RefBuffer*     buffer::mk                    (uint32_t size);                        ",
      "name": "buffer::mk",
      "type": "F",
      "args": 1,
      "full": "bitvm::buffer::mk"
    },
    {
      "proto": "void           buffer::set                   (RefBuffer *c, int x, uint32_t y);      ",
      "name": "buffer::set",
      "type": "P",
      "args": 3,
      "full": "bitvm::buffer::set"
    },
    {
      "proto": "void           collection::add               (RefCollection *c, uint32_t x);         ",
      "name": "collection::add",
      "type": "P",
      "args": 2,
      "full": "bitvm::collection::add"
    },
    {
      "proto": "uint32_t       collection::at                (RefCollection *c, int x);              ",
      "name": "collection::at",
      "type": "F",
      "args": 2,
      "full": "bitvm::collection::at"
    },
    {
      "proto": "int            collection::count             (RefCollection *c);                     ",
      "name": "collection::count",
      "type": "F",
      "args": 1,
      "full": "bitvm::collection::count"
    },
    {
      "proto": "int            collection::index_of          (RefCollection *c, uint32_t x, int start); ",
      "name": "collection::index_of",
      "type": "F",
      "args": 3,
      "full": "bitvm::collection::index_of"
    },
    {
      "proto": "RefCollection* collection::mk                (uint32_t flags);                       ",
      "name": "collection::mk",
      "type": "F",
      "args": 1,
      "full": "bitvm::collection::mk"
    },
    {
      "proto": "int            collection::remove            (RefCollection *c, uint32_t x);         ",
      "name": "collection::remove",
      "type": "F",
      "args": 2,
      "full": "bitvm::collection::remove"
    },
    {
      "proto": "void           collection::remove_at         (RefCollection *c, int x);              ",
      "name": "collection::remove_at",
      "type": "P",
      "args": 2,
      "full": "bitvm::collection::remove_at"
    },
    {
      "proto": "void           collection::set_at            (RefCollection *c, int x, uint32_t y);  ",
      "name": "collection::set_at",
      "type": "P",
      "args": 3,
      "full": "bitvm::collection::set_at"
    },
    {
      "proto": "void           contract::assert              (int cond, uint32_t msg);               ",
      "name": "contract::assert",
      "type": "P",
      "args": 2,
      "full": "bitvm::contract::assert"
    },
    {
      "proto": "void           ds1307::adjust                (user_types::DateTime d);               ",
      "name": "ds1307::adjust",
      "type": "P",
      "args": 1
    },
    {
      "proto": "uint8_t        ds1307::bcd2bin               (uint8_t val);                          ",
      "name": "ds1307::bcd2bin",
      "type": "F",
      "args": 1
    },
    {
      "proto": "uint8_t        ds1307::bin2bcd               (uint8_t val);                          ",
      "name": "ds1307::bin2bcd",
      "type": "F",
      "args": 1
    },
    {
      "proto": "Action         invalid::action               ();                                     ",
      "name": "invalid::action",
      "type": "F",
      "args": 0
    },
    {
      "proto": "int            math::abs                     (int x);                                ",
      "name": "math::abs",
      "type": "F",
      "args": 1
    },
    {
      "proto": "int            math::clamp                   (int l, int h, int x);                  ",
      "name": "math::clamp",
      "type": "F",
      "args": 3
    },
    {
      "proto": "int            math::max                     (int x, int y);                         ",
      "name": "math::max",
      "type": "F",
      "args": 2
    },
    {
      "proto": "int            math::min                     (int x, int y);                         ",
      "name": "math::min",
      "type": "F",
      "args": 2
    },
    {
      "proto": "int            math::mod                     (int x, int y);                         ",
      "name": "math::mod",
      "type": "F",
      "args": 2
    },
    {
      "proto": "int            math::pow                     (int x, int n);                         ",
      "name": "math::pow",
      "type": "F",
      "args": 2
    },
    {
      "proto": "int            math::random                  (int max);                              ",
      "name": "math::random",
      "type": "F",
      "args": 1
    },
    {
      "proto": "int            math::sign                    (int x);                                ",
      "name": "math::sign",
      "type": "F",
      "args": 1
    },
    {
      "proto": "int            math::sqrt                    (int x);                                ",
      "name": "math::sqrt",
      "type": "F",
      "args": 1
    },
    {
      "proto": "int            micro_bit::analogReadPin      (MicroBitPin& p);                       ",
      "name": "micro_bit::analogReadPin",
      "type": "F",
      "args": 1
    },
    {
      "proto": "void           micro_bit::analogWritePin     (MicroBitPin& p, int value);            ",
      "name": "micro_bit::analogWritePin",
      "type": "P",
      "args": 2
    },
    {
      "proto": "void           micro_bit::clearImage         (ImageData *i);                         ",
      "name": "micro_bit::clearImage",
      "type": "P",
      "args": 1,
      "full": "bitvm::bitvm_micro_bit::clearImage"
    },
    {
      "proto": "void           micro_bit::clearScreen        ();                                     ",
      "name": "micro_bit::clearScreen",
      "type": "P",
      "args": 0
    },
    {
      "proto": "int            micro_bit::compassHeading     ();                                     ",
      "name": "micro_bit::compassHeading",
      "type": "F",
      "args": 0
    },
    {
      "proto": "ImageData*     micro_bit::createImage        (uint32_t lit);                         ",
      "name": "micro_bit::createImage",
      "type": "F",
      "args": 1,
      "full": "bitvm::bitvm_micro_bit::createImage"
    },
    {
      "proto": "ImageData*     micro_bit::createImageFromString (StringData *s);                        ",
      "name": "micro_bit::createImageFromString",
      "type": "F",
      "args": 1,
      "full": "bitvm::bitvm_micro_bit::createImageFromString"
    },
    {
      "proto": "ImageData*     micro_bit::createReadOnlyImage (uint32_t lit);                         ",
      "name": "micro_bit::createReadOnlyImage",
      "type": "F",
      "args": 1,
      "full": "bitvm::bitvm_micro_bit::createReadOnlyImage"
    },
    {
      "proto": "void           micro_bit::devices::alert     (int event);                            ",
      "name": "micro_bit::devices::alert",
      "type": "P",
      "args": 1
    },
    {
      "proto": "void           micro_bit::devices::camera    (int event);                            ",
      "name": "micro_bit::devices::camera",
      "type": "P",
      "args": 1
    },
    {
      "proto": "void           micro_bit::devices::remote_control (int event);                            ",
      "name": "micro_bit::devices::remote_control",
      "type": "P",
      "args": 1
    },
    {
      "proto": "int            micro_bit::digitalReadPin     (MicroBitPin& p);                       ",
      "name": "micro_bit::digitalReadPin",
      "type": "F",
      "args": 1
    },
    {
      "proto": "void           micro_bit::digitalWritePin    (MicroBitPin& p, int value);            ",
      "name": "micro_bit::digitalWritePin",
      "type": "P",
      "args": 2
    },
    {
      "proto": "void           micro_bit::dispatchEvent      (MicroBitEvent e);                      ",
      "name": "micro_bit::dispatchEvent",
      "type": "P",
      "args": 1,
      "full": "bitvm::bitvm_micro_bit::dispatchEvent"
    },
    {
      "proto": "ImageData*     micro_bit::displayScreenShot  ();                                     ",
      "name": "micro_bit::displayScreenShot",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::displayScreenShot"
    },
    {
      "proto": "void           micro_bit::displayStopAnimation ();                                     ",
      "name": "micro_bit::displayStopAnimation",
      "type": "P",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::displayStopAnimation"
    },
    {
      "proto": "void           micro_bit::enablePitch        (MicroBitPin& p);                       ",
      "name": "micro_bit::enablePitch",
      "type": "P",
      "args": 1
    },
    {
      "proto": "void           micro_bit::fiberDone          (void *a);                              ",
      "name": "micro_bit::fiberDone",
      "type": "P",
      "args": 1,
      "full": "bitvm::bitvm_micro_bit::fiberDone"
    },
    {
      "proto": "void           micro_bit::forever            (Action a);                             ",
      "name": "micro_bit::forever",
      "type": "P",
      "args": 1,
      "full": "bitvm::bitvm_micro_bit::forever"
    },
    {
      "proto": "void           micro_bit::forever_stub       (void *a);                              ",
      "name": "micro_bit::forever_stub",
      "type": "P",
      "args": 1,
      "full": "bitvm::bitvm_micro_bit::forever_stub"
    },
    {
      "proto": "void           micro_bit::generate_event     (int id, int event);                    ",
      "name": "micro_bit::generate_event",
      "type": "P",
      "args": 2
    },
    {
      "proto": "int            micro_bit::getAcceleration    (int dimension);                        ",
      "name": "micro_bit::getAcceleration",
      "type": "F",
      "args": 1
    },
    {
      "proto": "int            micro_bit::getBrightness      ();                                     ",
      "name": "micro_bit::getBrightness",
      "type": "F",
      "args": 0
    },
    {
      "proto": "int            micro_bit::getCurrentTime     ();                                     ",
      "name": "micro_bit::getCurrentTime",
      "type": "F",
      "args": 0
    },
    {
      "proto": "int            micro_bit::getImageHeight     (ImageData *i);                         ",
      "name": "micro_bit::getImageHeight",
      "type": "F",
      "args": 1,
      "full": "bitvm::bitvm_micro_bit::getImageHeight"
    },
    {
      "proto": "int            micro_bit::getImagePixel      (ImageData *i, int x, int y);           ",
      "name": "micro_bit::getImagePixel",
      "type": "F",
      "args": 3,
      "full": "bitvm::bitvm_micro_bit::getImagePixel"
    },
    {
      "proto": "int            micro_bit::getImageWidth      (ImageData *i);                         ",
      "name": "micro_bit::getImageWidth",
      "type": "F",
      "args": 1,
      "full": "bitvm::bitvm_micro_bit::getImageWidth"
    },
    {
      "proto": "int            micro_bit::getMagneticForce   (int dimension);                        ",
      "name": "micro_bit::getMagneticForce",
      "type": "F",
      "args": 1
    },
    {
      "proto": "int            micro_bit::getRotation        (int dimension);                        ",
      "name": "micro_bit::getRotation",
      "type": "F",
      "args": 1
    },
    {
      "proto": "void           micro_bit::i2cReadBuffer      (int address, RefBuffer *buf);          ",
      "name": "micro_bit::i2cReadBuffer",
      "type": "P",
      "args": 2,
      "full": "bitvm::bitvm_micro_bit::i2cReadBuffer"
    },
    {
      "proto": "int            micro_bit::i2cReadRaw         (int address, char *data, int length, int repeated); ",
      "name": "micro_bit::i2cReadRaw",
      "type": "F",
      "args": 4,
      "full": "bitvm::bitvm_micro_bit::i2cReadRaw"
    },
    {
      "proto": "void           micro_bit::i2cWriteBuffer     (int address, RefBuffer *buf);          ",
      "name": "micro_bit::i2cWriteBuffer",
      "type": "P",
      "args": 2,
      "full": "bitvm::bitvm_micro_bit::i2cWriteBuffer"
    },
    {
      "proto": "int            micro_bit::i2cWriteRaw        (int address, const char *data, int length, int repeated); ",
      "name": "micro_bit::i2cWriteRaw",
      "type": "F",
      "args": 4,
      "full": "bitvm::bitvm_micro_bit::i2cWriteRaw"
    },
    {
      "proto": "int            micro_bit::i2c_read           (int addr);                             ",
      "name": "micro_bit::i2c_read",
      "type": "F",
      "args": 1
    },
    {
      "proto": "void           micro_bit::i2c_write          (int addr, char c);                     ",
      "name": "micro_bit::i2c_write",
      "type": "P",
      "args": 2
    },
    {
      "proto": "void           micro_bit::i2c_write2         (int addr, int c1, int c2);             ",
      "name": "micro_bit::i2c_write2",
      "type": "P",
      "args": 3
    },
    {
      "proto": "ImageData*     micro_bit::imageClone         (ImageData *i);                         ",
      "name": "micro_bit::imageClone",
      "type": "F",
      "args": 1,
      "full": "bitvm::bitvm_micro_bit::imageClone"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP0               ();                                     ",
      "name": "micro_bit::ioP0",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP0"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP1               ();                                     ",
      "name": "micro_bit::ioP1",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP1"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP10              ();                                     ",
      "name": "micro_bit::ioP10",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP10"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP11              ();                                     ",
      "name": "micro_bit::ioP11",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP11"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP12              ();                                     ",
      "name": "micro_bit::ioP12",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP12"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP13              ();                                     ",
      "name": "micro_bit::ioP13",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP13"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP14              ();                                     ",
      "name": "micro_bit::ioP14",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP14"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP15              ();                                     ",
      "name": "micro_bit::ioP15",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP15"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP16              ();                                     ",
      "name": "micro_bit::ioP16",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP16"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP19              ();                                     ",
      "name": "micro_bit::ioP19",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP19"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP2               ();                                     ",
      "name": "micro_bit::ioP2",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP2"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP20              ();                                     ",
      "name": "micro_bit::ioP20",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP20"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP3               ();                                     ",
      "name": "micro_bit::ioP3",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP3"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP4               ();                                     ",
      "name": "micro_bit::ioP4",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP4"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP5               ();                                     ",
      "name": "micro_bit::ioP5",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP5"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP6               ();                                     ",
      "name": "micro_bit::ioP6",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP6"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP7               ();                                     ",
      "name": "micro_bit::ioP7",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP7"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP8               ();                                     ",
      "name": "micro_bit::ioP8",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP8"
    },
    {
      "proto": "MicroBitPin*   micro_bit::ioP9               ();                                     ",
      "name": "micro_bit::ioP9",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::ioP9"
    },
    {
      "proto": "bool           micro_bit::isButtonPressed    (int button);                           ",
      "name": "micro_bit::isButtonPressed",
      "type": "F",
      "args": 1
    },
    {
      "proto": "bool           micro_bit::isImageReadOnly    (ImageData *i);                         ",
      "name": "micro_bit::isImageReadOnly",
      "type": "F",
      "args": 1,
      "full": "bitvm::bitvm_micro_bit::isImageReadOnly"
    },
    {
      "proto": "bool           micro_bit::isPinTouched       (MicroBitPin& pin);                     ",
      "name": "micro_bit::isPinTouched",
      "type": "F",
      "args": 1
    },
    {
      "proto": "void           micro_bit::onButtonPressed    (int button, Action a);                 ",
      "name": "micro_bit::onButtonPressed",
      "type": "P",
      "args": 2,
      "full": "bitvm::bitvm_micro_bit::onButtonPressed"
    },
    {
      "proto": "void           micro_bit::onButtonPressedExt (int button, int event, Action a);      ",
      "name": "micro_bit::onButtonPressedExt",
      "type": "P",
      "args": 3,
      "full": "bitvm::bitvm_micro_bit::onButtonPressedExt"
    },
    {
      "proto": "void           micro_bit::onDeviceInfo       (int event, Action a);                  ",
      "name": "micro_bit::onDeviceInfo",
      "type": "P",
      "args": 2,
      "full": "bitvm::bitvm_micro_bit::onDeviceInfo"
    },
    {
      "proto": "void           micro_bit::onPinPressed       (int pin, Action a);                    ",
      "name": "micro_bit::onPinPressed",
      "type": "P",
      "args": 2,
      "full": "bitvm::bitvm_micro_bit::onPinPressed"
    },
    {
      "proto": "void           micro_bit::on_event           (int id, Action a);                     ",
      "name": "micro_bit::on_event",
      "type": "P",
      "args": 2,
      "full": "bitvm::bitvm_micro_bit::on_event"
    },
    {
      "proto": "void           micro_bit::panic              (int code);                             ",
      "name": "micro_bit::panic",
      "type": "P",
      "args": 1,
      "full": "bitvm::bitvm_micro_bit::panic"
    },
    {
      "proto": "void           micro_bit::pause              (int ms);                               ",
      "name": "micro_bit::pause",
      "type": "P",
      "args": 1
    },
    {
      "proto": "void           micro_bit::pitch              (int freq, int ms);                     ",
      "name": "micro_bit::pitch",
      "type": "P",
      "args": 2
    },
    {
      "proto": "void           micro_bit::plot               (int x, int y);                         ",
      "name": "micro_bit::plot",
      "type": "P",
      "args": 2
    },
    {
      "proto": "void           micro_bit::plotImage          (ImageData *i, int offset);             ",
      "name": "micro_bit::plotImage",
      "type": "P",
      "args": 2,
      "full": "bitvm::bitvm_micro_bit::plotImage"
    },
    {
      "proto": "void           micro_bit::plotLeds           (uint32_t lit);                         ",
      "name": "micro_bit::plotLeds",
      "type": "P",
      "args": 1,
      "full": "bitvm::bitvm_micro_bit::plotLeds"
    },
    {
      "proto": "bool           micro_bit::point              (int x, int y);                         ",
      "name": "micro_bit::point",
      "type": "F",
      "args": 2
    },
    {
      "proto": "void           micro_bit::registerWithDal    (int id, int event, Action a);          ",
      "name": "micro_bit::registerWithDal",
      "type": "P",
      "args": 3,
      "full": "bitvm::bitvm_micro_bit::registerWithDal"
    },
    {
      "proto": "void           micro_bit::reset              ();                                     ",
      "name": "micro_bit::reset",
      "type": "P",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::reset"
    },
    {
      "proto": "void           micro_bit::runInBackground    (Action a);                             ",
      "name": "micro_bit::runInBackground",
      "type": "P",
      "args": 1,
      "full": "bitvm::bitvm_micro_bit::runInBackground"
    },
    {
      "proto": "void           micro_bit::scrollImage        (ImageData *i, int offset, int delay);  ",
      "name": "micro_bit::scrollImage",
      "type": "P",
      "args": 3,
      "full": "bitvm::bitvm_micro_bit::scrollImage"
    },
    {
      "proto": "void           micro_bit::scrollNumber       (int n, int delay);                     ",
      "name": "micro_bit::scrollNumber",
      "type": "P",
      "args": 2
    },
    {
      "proto": "void           micro_bit::scrollString       (StringData *s, int delay);             ",
      "name": "micro_bit::scrollString",
      "type": "P",
      "args": 2,
      "full": "bitvm::bitvm_micro_bit::scrollString"
    },
    {
      "proto": "void           micro_bit::serialReadDisplayState ();                                     ",
      "name": "micro_bit::serialReadDisplayState",
      "type": "P",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::serialReadDisplayState"
    },
    {
      "proto": "ImageData*     micro_bit::serialReadImage    (int width, int height);                ",
      "name": "micro_bit::serialReadImage",
      "type": "F",
      "args": 2,
      "full": "bitvm::bitvm_micro_bit::serialReadImage"
    },
    {
      "proto": "StringData*    micro_bit::serialReadString   ();                                     ",
      "name": "micro_bit::serialReadString",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::serialReadString"
    },
    {
      "proto": "void           micro_bit::serialSendDisplayState ();                                     ",
      "name": "micro_bit::serialSendDisplayState",
      "type": "P",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::serialSendDisplayState"
    },
    {
      "proto": "void           micro_bit::serialSendImage    (ImageData *img);                       ",
      "name": "micro_bit::serialSendImage",
      "type": "P",
      "args": 1,
      "full": "bitvm::bitvm_micro_bit::serialSendImage"
    },
    {
      "proto": "void           micro_bit::serialSendString   (StringData *s);                        ",
      "name": "micro_bit::serialSendString",
      "type": "P",
      "args": 1,
      "full": "bitvm::bitvm_micro_bit::serialSendString"
    },
    {
      "proto": "void           micro_bit::servoWritePin      (MicroBitPin& p, int value);            ",
      "name": "micro_bit::servoWritePin",
      "type": "P",
      "args": 2
    },
    {
      "proto": "void           micro_bit::setAnalogPeriodUs  (MicroBitPin& p, int micros);           ",
      "name": "micro_bit::setAnalogPeriodUs",
      "type": "P",
      "args": 2
    },
    {
      "proto": "void           micro_bit::setBrightness      (int percentage);                       ",
      "name": "micro_bit::setBrightness",
      "type": "P",
      "args": 1
    },
    {
      "proto": "void           micro_bit::setImagePixel      (ImageData *i, int x, int y, int value); ",
      "name": "micro_bit::setImagePixel",
      "type": "P",
      "args": 4,
      "full": "bitvm::bitvm_micro_bit::setImagePixel"
    },
    {
      "proto": "void           micro_bit::setServoPulseUs    (MicroBitPin& p, int micros);           ",
      "name": "micro_bit::setServoPulseUs",
      "type": "P",
      "args": 2
    },
    {
      "proto": "void           micro_bit::showAnimation      (uint32_t lit, int ms);                 ",
      "name": "micro_bit::showAnimation",
      "type": "P",
      "args": 2,
      "full": "bitvm::bitvm_micro_bit::showAnimation"
    },
    {
      "proto": "void           micro_bit::showDigit          (int n);                                ",
      "name": "micro_bit::showDigit",
      "type": "P",
      "args": 1
    },
    {
      "proto": "void           micro_bit::showImage          (ImageData *i, int offset);             ",
      "name": "micro_bit::showImage",
      "type": "P",
      "args": 2,
      "full": "bitvm::bitvm_micro_bit::showImage"
    },
    {
      "proto": "void           micro_bit::showLeds           (uint32_t lit, int delay);              ",
      "name": "micro_bit::showLeds",
      "type": "P",
      "args": 2,
      "full": "bitvm::bitvm_micro_bit::showLeds"
    },
    {
      "proto": "void           micro_bit::showLetter         (StringData *s);                        ",
      "name": "micro_bit::showLetter",
      "type": "P",
      "args": 1,
      "full": "bitvm::bitvm_micro_bit::showLetter"
    },
    {
      "proto": "void           micro_bit::stopAnimation      ();                                     ",
      "name": "micro_bit::stopAnimation",
      "type": "P",
      "args": 0
    },
    {
      "proto": "int            micro_bit::thermometerGetTemperature ();                                     ",
      "name": "micro_bit::thermometerGetTemperature",
      "type": "F",
      "args": 0,
      "full": "bitvm::bitvm_micro_bit::thermometerGetTemperature"
    },
    {
      "proto": "void           micro_bit::unPlot             (int x, int y);                         ",
      "name": "micro_bit::unPlot",
      "type": "P",
      "args": 2
    },
    {
      "proto": "int            number::add                   (int x, int y);                         ",
      "name": "number::add",
      "type": "F",
      "args": 2
    },
    {
      "proto": "int            number::divide                (int x, int y);                         ",
      "name": "number::divide",
      "type": "F",
      "args": 2
    },
    {
      "proto": "bool           number::eq                    (int x, int y);                         ",
      "name": "number::eq",
      "type": "F",
      "args": 2
    },
    {
      "proto": "bool           number::ge                    (int x, int y);                         ",
      "name": "number::ge",
      "type": "F",
      "args": 2
    },
    {
      "proto": "bool           number::gt                    (int x, int y);                         ",
      "name": "number::gt",
      "type": "F",
      "args": 2
    },
    {
      "proto": "bool           number::le                    (int x, int y);                         ",
      "name": "number::le",
      "type": "F",
      "args": 2
    },
    {
      "proto": "bool           number::lt                    (int x, int y);                         ",
      "name": "number::lt",
      "type": "F",
      "args": 2
    },
    {
      "proto": "int            number::multiply              (int x, int y);                         ",
      "name": "number::multiply",
      "type": "F",
      "args": 2
    },
    {
      "proto": "bool           number::neq                   (int x, int y);                         ",
      "name": "number::neq",
      "type": "F",
      "args": 2
    },
    {
      "proto": "void           number::post_to_wall          (int n);                                ",
      "name": "number::post_to_wall",
      "type": "P",
      "args": 1,
      "full": "bitvm::bitvm_number::post_to_wall"
    },
    {
      "proto": "int            number::subtract              (int x, int y);                         ",
      "name": "number::subtract",
      "type": "F",
      "args": 2
    },
    {
      "proto": "StringData*    number::to_character          (int x);                                ",
      "name": "number::to_character",
      "type": "F",
      "args": 1,
      "full": "bitvm::bitvm_number::to_character"
    },
    {
      "proto": "StringData*    number::to_string             (int x);                                ",
      "name": "number::to_string",
      "type": "F",
      "args": 1,
      "full": "bitvm::bitvm_number::to_string"
    },
    {
      "proto": "RefRecord*     record::mk                    (int reflen, int totallen);             ",
      "name": "record::mk",
      "type": "F",
      "args": 2,
      "full": "bitvm::record::mk"
    },
    {
      "proto": "ManagedString  string::_                     (ManagedString s1, ManagedString s2);   ",
      "name": "string::_",
      "type": "F",
      "args": 2
    },
    {
      "proto": "StringData*    string::at                    (StringData *s, int i);                 ",
      "name": "string::at",
      "type": "F",
      "args": 2,
      "full": "bitvm::string::at"
    },
    {
      "proto": "int            string::code_at               (StringData *s, int i);                 ",
      "name": "string::code_at",
      "type": "F",
      "args": 2,
      "full": "bitvm::string::code_at"
    },
    {
      "proto": "StringData*    string::concat                (StringData *s1, StringData *s2);       ",
      "name": "string::concat",
      "type": "F",
      "args": 2,
      "full": "bitvm::string::concat"
    },
    {
      "proto": "StringData*    string::concat_op             (StringData *s1, StringData *s2);       ",
      "name": "string::concat_op",
      "type": "F",
      "args": 2,
      "full": "bitvm::string::concat_op"
    },
    {
      "proto": "int            string::count                 (StringData *s);                        ",
      "name": "string::count",
      "type": "F",
      "args": 1,
      "full": "bitvm::string::count"
    },
    {
      "proto": "bool           string::equals                (StringData *s1, StringData *s2);       ",
      "name": "string::equals",
      "type": "F",
      "args": 2,
      "full": "bitvm::string::equals"
    },
    {
      "proto": "StringData*    string::mkEmpty               ();                                     ",
      "name": "string::mkEmpty",
      "type": "F",
      "args": 0,
      "full": "bitvm::string::mkEmpty"
    },
    {
      "proto": "void           string::post_to_wall          (StringData *s);                        ",
      "name": "string::post_to_wall",
      "type": "P",
      "args": 1,
      "full": "bitvm::string::post_to_wall"
    },
    {
      "proto": "StringData*    string::substring             (StringData *s, int i, int j);          ",
      "name": "string::substring",
      "type": "F",
      "args": 3,
      "full": "bitvm::string::substring"
    },
    {
      "proto": "int            string::to_character_code     (StringData *s);                        ",
      "name": "string::to_character_code",
      "type": "F",
      "args": 1,
      "full": "bitvm::string::to_character_code"
    },
    {
      "proto": "int            string::to_number             (StringData *s);                        ",
      "name": "string::to_number",
      "type": "F",
      "args": 1,
      "full": "bitvm::string::to_number"
    },
    {
      "proto": "void           touch_develop::dispatchEvent  (MicroBitEvent e);                      ",
      "name": "touch_develop::dispatchEvent",
      "type": "P",
      "args": 1,
      "full": "touch_develop::dispatchEvent"
    },
    {
      "proto": "void           touch_develop::internal_main  ();                                     ",
      "name": "touch_develop::internal_main",
      "type": "P",
      "args": 0,
      "full": "touch_develop::internal_main"
    },
    {
      "proto": "ManagedString  touch_develop::mk_string      (char* c);                              ",
      "name": "touch_develop::mk_string",
      "type": "F",
      "args": 1
    },
    {
      "proto": "void           wait_us                       (int us);                               ",
      "name": "wait_us",
      "type": "P",
      "args": 1,
      "full": "wait_us"
    }
  ],
  "enums": {
    "NO_PWMS": 3,
    "MICROBIT_DEFAULT_PWM_PERIOD": 20000,
    "MICROBIT_ID_BLE": 1000,
    "MES_REMOTE_CONTROL_ID": 1001,
    "MES_REMOTE_CONTROL_EVT_PLAY": 1,
    "MES_REMOTE_CONTROL_EVT_PAUSE": 2,
    "MES_REMOTE_CONTROL_EVT_STOP": 3,
    "MES_REMOTE_CONTROL_EVT_NEXTTRACK": 4,
    "MES_REMOTE_CONTROL_EVT_PREVTRACK": 5,
    "MES_REMOTE_CONTROL_EVT_FORWARD": 6,
    "MES_REMOTE_CONTROL_EVT_REWIND": 7,
    "MES_REMOTE_CONTROL_EVT_VOLUMEUP": 8,
    "MES_REMOTE_CONTROL_EVT_VOLUMEDOWN": 9,
    "MES_CAMERA_ID": 1002,
    "MES_CAMERA_EVT_LAUNCH_PHOTO_MODE": 1,
    "MES_CAMERA_EVT_LAUNCH_VIDEO_MODE": 2,
    "MES_CAMERA_EVT_TAKE_PHOTO": 3,
    "MES_CAMERA_EVT_START_VIDEO_CAPTURE": 4,
    "MES_CAMERA_EVT_STOP_VIDEO_CAPTURE": 5,
    "MES_CAMERA_EVT_STOP_PHOTO_MODE": 6,
    "MES_CAMERA_EVT_STOP_VIDEO_MODE": 7,
    "MES_CAMERA_EVT_TOGGLE_FRONT_REAR": 8,
    "MES_ALERTS_ID": 1004,
    "MES_ALERT_EVT_DISPLAY_TOAST": 1,
    "MES_ALERT_EVT_VIBRATE": 2,
    "MES_ALERT_EVT_PLAY_SOUND": 3,
    "MES_ALERT_EVT_PLAY_RINGTONE": 4,
    "MES_ALERT_EVT_FIND_MY_PHONE": 5,
    "MES_ALERT_EVT_ALARM1": 6,
    "MES_ALERT_EVT_ALARM2": 7,
    "MES_ALERT_EVT_ALARM3": 8,
    "MES_ALERT_EVT_ALARM4": 9,
    "MES_ALERT_EVT_ALARM5": 10,
    "MES_ALERT_EVT_ALARM6": 11,
    "MES_SIGNAL_STRENGTH_ID": 1101,
    "MES_SIGNAL_STRENGTH_EVT_NO_BAR": 1,
    "MES_SIGNAL_STRENGTH_EVT_ONE_BAR": 2,
    "MES_SIGNAL_STRENGTH_EVT_TWO_BAR": 3,
    "MES_SIGNAL_STRENGTH_EVT_THREE_BAR": 4,
    "MES_SIGNAL_STRENGTH_EVT_FOUR_BAR": 5,
    "MES_DEVICE_INFO_ID": 1103,
    "MES_DEVICE_ORIENTATION_LANDSCAPE": 1,
    "MES_DEVICE_ORIENTATION_PORTRAIT": 2,
    "MES_DEVICE_GESTURE_NONE": 3,
    "MES_DEVICE_GESTURE_DEVICE_SHAKEN": 4,
    "MES_DEVICE_DISPLAY_OFF": 5,
    "MES_DEVICE_DISPLAY_ON": 6,
    "MES_DEVICE_INCOMING_CALL": 7,
    "MES_DEVICE_INCOMING_MESSAGE": 8,
    "MICROBIT_NAME_LENGTH": 5,
    "MICROBIT_NAME_CODE_LETTERS": 5,
    "MMA8653_SAMPLE_RANGES": 3,
    "MMA8653_SAMPLE_RATES": 8,
    "MICROBIT_ACCELEROMETER_EVT_DATA_UPDATE": 1,
    "MICROBIT_ACCELEROMETER_EVT_TILT_UP": 1,
    "MICROBIT_ACCELEROMETER_EVT_TILT_DOWN": 2,
    "MICROBIT_ACCELEROMETER_EVT_TILT_LEFT": 3,
    "MICROBIT_ACCELEROMETER_EVT_TILT_RIGHT": 4,
    "MICROBIT_ACCELEROMETER_EVT_FACE_UP": 5,
    "MICROBIT_ACCELEROMETER_EVT_FACE_DOWN": 6,
    "MICROBIT_ACCELEROMETER_EVT_FREEFALL": 7,
    "MICROBIT_ACCELEROMETER_EVT_3G": 8,
    "MICROBIT_ACCELEROMETER_EVT_6G": 9,
    "MICROBIT_ACCELEROMETER_EVT_8G": 10,
    "MICROBIT_ACCELEROMETER_EVT_SHAKE": 11,
    "MICROBIT_ACCELEROMETER_REST_TOLERANCE": 200,
    "MICROBIT_ACCELEROMETER_TILT_TOLERANCE": 200,
    "MICROBIT_ACCELEROMETER_FREEFALL_TOLERANCE": 400,
    "MICROBIT_ACCELEROMETER_SHAKE_TOLERANCE": 1000,
    "MICROBIT_ACCELEROMETER_3G_TOLERANCE": 3072,
    "MICROBIT_ACCELEROMETER_6G_TOLERANCE": 6144,
    "MICROBIT_ACCELEROMETER_8G_TOLERANCE": 8192,
    "MICROBIT_ACCELEROMETER_GESTURE_DAMPING": 10,
    "MICROBIT_ACCELEROMETER_SHAKE_DAMPING": 10,
    "MICROBIT_ACCELEROMETER_SHAKE_COUNT_THRESHOLD": 4,
    "MICROBIT_BUTTON_EVT_DOWN": 1,
    "MICROBIT_BUTTON_EVT_UP": 2,
    "MICROBIT_BUTTON_EVT_CLICK": 3,
    "MICROBIT_BUTTON_EVT_LONG_CLICK": 4,
    "MICROBIT_BUTTON_EVT_HOLD": 5,
    "MICROBIT_BUTTON_EVT_DOUBLE_CLICK": 6,
    "MICROBIT_BUTTON_LONG_CLICK_TIME": 1000,
    "MICROBIT_BUTTON_HOLD_TIME": 1500,
    "MICROBIT_BUTTON_STATE": 1,
    "MICROBIT_BUTTON_STATE_HOLD_TRIGGERED": 2,
    "MICROBIT_BUTTON_STATE_CLICK": 4,
    "MICROBIT_BUTTON_STATE_LONG_CLICK": 8,
    "MICROBIT_BUTTON_SIGMA_MIN": 0,
    "MICROBIT_BUTTON_SIGMA_MAX": 12,
    "MICROBIT_BUTTON_SIGMA_THRESH_HI": 8,
    "MICROBIT_BUTTON_SIGMA_THRESH_LO": 2,
    "MICROBIT_BUTTON_DOUBLE_CLICK_THRESH": 50,
    "MAG3110_SAMPLE_RATES": 11,
    "MICROBIT_COMPASS_EVT_CAL_REQUIRED": 1,
    "MICROBIT_COMPASS_EVT_CAL_START": 2,
    "MICROBIT_COMPASS_EVT_CAL_END": 3,
    "MICROBIT_COMPASS_EVT_DATA_UPDATE": 4,
    "MICROBIT_COMPASS_EVT_CONFIG_NEEDED": 5,
    "MICROBIT_COMPASS_EVT_CALIBRATE": 6,
    "MICROBIT_COMPASS_STATUS_CALIBRATED": 1,
    "MICROBIT_COMPASS_STATUS_CALIBRATING": 2,
    "MICROBIT_ID_BUTTON_A": 1,
    "MICROBIT_ID_BUTTON_B": 2,
    "MICROBIT_ID_BUTTON_RESET": 3,
    "MICROBIT_ID_ACCELEROMETER": 4,
    "MICROBIT_ID_COMPASS": 5,
    "MICROBIT_ID_DISPLAY": 6,
    "MICROBIT_IO_PINS": 20,
    "MICROBIT_ID_IO_P0": 7,
    "MICROBIT_ID_IO_P1": 8,
    "MICROBIT_ID_IO_P2": 9,
    "MICROBIT_ID_IO_P3": 10,
    "MICROBIT_ID_IO_P4": 11,
    "MICROBIT_ID_IO_P5": 12,
    "MICROBIT_ID_IO_P6": 13,
    "MICROBIT_ID_IO_P7": 14,
    "MICROBIT_ID_IO_P8": 15,
    "MICROBIT_ID_IO_P9": 16,
    "MICROBIT_ID_IO_P10": 17,
    "MICROBIT_ID_IO_P11": 18,
    "MICROBIT_ID_IO_P12": 19,
    "MICROBIT_ID_IO_P13": 20,
    "MICROBIT_ID_IO_P14": 21,
    "MICROBIT_ID_IO_P15": 22,
    "MICROBIT_ID_IO_P16": 23,
    "MICROBIT_ID_IO_P19": 24,
    "MICROBIT_ID_IO_P20": 25,
    "MICROBIT_ID_BUTTON_AB": 26,
    "MICROBIT_ID_GESTURE": 27,
    "MICROBIT_ID_THERMOMETER": 28,
    "MICROBIT_ID_NOTIFY": 1023,
    "MICROBIT_ID_NOTIFY_ONE": 1022,
    "MICROBIT_STACK_SIZE": 2048,
    "MICROBIT_HEAP_BLOCK_SIZE": 4,
    "MICROBIT_HEAP_REUSE_SD": 1,
    "FIBER_TICK_PERIOD_MS": 6,
    "MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH": 10,
    "MICROBIT_SYSTEM_COMPONENTS": 10,
    "MICROBIT_IDLE_COMPONENTS": 6,
    "MICROBIT_BLE_ENABLED": 1,
    "MICROBIT_BLE_PAIRING_MODE": 1,
    "MICROBIT_BLE_PRIVATE_ADDRESSES": 0,
    "MICROBIT_BLE_DFU_SERVICE": 1,
    "MICROBIT_BLE_EVENT_SERVICE": 1,
    "MICROBIT_BLE_DEVICE_INFORMATION_SERVICE": 1,
    "MICROBIT_BLE_LED_SERVICE": 0,
    "MICROBIT_BLE_ACCELEROMETER_SERVICE": 0,
    "MICROBIT_BLE_MAGNETOMETER_SERVICE": 0,
    "MICROBIT_BLE_BUTTON_SERVICE": 0,
    "MICROBIT_BLE_IO_PIN_SERVICE": 0,
    "MICROBIT_BLE_TEMPERATURE_SERVICE": 0,
    "MICROBIT_BLE_MAXIMUM_SCROLLTEXT": 20,
    "USE_ACCEL_LSB": 0,
    "MICROBUG_REFERENCE_DEVICE": 1,
    "MICROBIT_3X9": 2,
    "MICROBIT_SB1": 3,
    "MICROBIT_SB2": 4,
    "MICROBIT_DISPLAY_MINIMUM_BRIGHTNESS": 2,
    "MICROBIT_DISPLAY_MAXIMUM_BRIGHTNESS": 255,
    "MICROBIT_DEFAULT_SCROLL_SPEED": 120,
    "MICROBIT_DEFAULT_PRINT_SPEED": 400,
    "MICROBIT_PANIC_HEAP_FULL": 1,
    "MICROBIT_DBG": 0,
    "MICROBIT_HEAP_DBG": 0,
    "MICROBIT_DFU_OPCODE_START_DFU": 1,
    "MICROBIT_DFU_OPCODE_START_PAIR": 2,
    "MICROBIT_DFU_HISTOGRAM_WIDTH": 5,
    "MICROBIT_DFU_HISTOGRAM_HEIGHT": 5,
    "MICROBIT_DISPLAY_EVT_ANIMATION_COMPLETE": 1,
    "MICROBIT_DISPLAY_EVT_FREE": 2,
    "MICROBIT_DISPLAY_ROW_COUNT": 3,
    "MICROBIT_DISPLAY_COLUMN_COUNT": 9,
    "MICROBIT_DISPLAY_WIDTH": 5,
    "MICROBIT_DISPLAY_HEIGHT": 5,
    "MICROBIT_DISPLAY_SPACING": 1,
    "MICROBIT_DISPLAY_ERROR_CHARS": 4,
    "MICROBIT_DISPLAY_GREYSCALE_BIT_DEPTH": 8,
    "MICROBIT_FONT_WIDTH": 5,
    "MICROBIT_FONT_HEIGHT": 5,
    "MICROBIT_FONT_ASCII_START": 32,
    "MICROBIT_FONT_ASCII_END": 126,
    "MICROBIT_HEAP_COUNT": 2,
    "MICROBIT_I2C_MAX_RETRIES": 9,
    "MICROBIT_IO_PIN_SERVICE_PINCOUNT": 20,
    "MICROBIT_IO_PIN_SERVICE_DATA_SIZE": 10,
    "NO_CONN": 0,
    "MICROBIT_CONTROL_BUS_ID": 0,
    "MICROBIT_ID_ANY": 0,
    "MICROBIT_EVT_ANY": 0,
    "MICROBIT_PIN_MAX_OUTPUT": 1023,
    "MICROBIT_PIN_MAX_SERVO_RANGE": 180,
    "MICROBIT_PIN_DEFAULT_SERVO_RANGE": 1000,
    "MICROBIT_SERIAL_DEFAULT_BAUD_RATE": 115200,
    "MICROBIT_SERIAL_BUFFER_SIZE": 20,
    "MICROBIT_THERMOMETER_PERIOD": 1000,
    "MICROBIT_THERMOMETER_EVT_UPDATE": 1
  }
}